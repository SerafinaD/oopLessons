#include <vector>
#include <set>
#include "ArrayInt.h"
#include "card.h"

//////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////TASK 2/////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

int vecCount (const std::vector<int>& vec)
{
    std::set<int> temp;
    int res = 0;
    for (int i = 0; i < vec.size(); i++)
    {
        auto isInsert = temp.insert(vec[i]);
        if (isInsert.second)
            res++;
    }
    return (res);
}

int main(void)
{
//////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////TASK 1/////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

    ArrayInt testZero(5);
    for (int i = 1; i < 6; i++)
    {
        testZero.push_back(i);
    }
    testZero.insertBefore(7,0);
    testZero.sort();
   // testZero.print_arr();

//////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////TASK 2/////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

    std::vector<int> test;
    /*for (int i = 0; i < 9; i++)
    {
        test.push_back(i);
    }
    for (int i = 6; i < 11; i++)
    {
        test.push_back(i);
    }*/
    std::cout << vecCount(test) << std::endl;
}

//////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////TASK 3/////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

class Hand
{
    private:
    std::vector<Card*> Cards;
    public:
    void Add(Card* newcard)
    {
        Cards.push_back(newcard);
    }
    void Clear()
    {
        Cards.clear();
    }
    int GetValue()
    {
        int res = 0;
        int value;
        int ace = 0;
        for (int i = 0; i < Cards.size(); i++)
        {
            value = Cards[i]->GetValue();
            if (value == 1)
            {
                ace++;
            }
            else
            {
                res += value;
            }
        }
        while (ace)
        {
            res += (res > 10 ? 1 : 11);
            ace--;
        }
        return (res);
    }
};